diff -ruN tensorflow-1.6.0-rc0/tensorflow/BUILD tensorflow-1.6.0-rc0-android/tensorflow/BUILD
--- tensorflow-1.6.0-rc0/tensorflow/BUILD	2018-02-05 05:28:47.000000000 +0900
+++ tensorflow-1.6.0-rc0-android/tensorflow/BUILD	2018-02-09 23:53:44.112141839 +0900
@@ -14,7 +14,7 @@
     "leakr_badfiles.dic",
 ])
 
-load("//tensorflow:tensorflow.bzl", "tf_cc_shared_object")
+load("//tensorflow:tensorflow.bzl", "tf_cc_shared_object", "tf_copts")
 load(
     "//tensorflow/core:platform/default/build_config.bzl",
     "tf_additional_binary_deps",
@@ -796,30 +796,25 @@
 
 tf_cc_shared_object(
     name = "libtensorflow_cc.so",
-    linkopts = select({
-        "//tensorflow:darwin": [
-            "-Wl,-exported_symbols_list",  # This line must be directly followed by the exported_symbols.lds file
-            "//tensorflow:tf_exported_symbols.lds",
-        ],
-        "//tensorflow:windows": [],
-        "//tensorflow:windows_msvc": [],
-        "//conditions:default": [
-            "-z defs",
-            "-s",
-            "-Wl,--version-script",  #  This line must be directly followed by the version_script.lds file
-            "//tensorflow:tf_version_script.lds",
-        ],
-    }),
+    copts = tf_copts(),
+    linkopts = [
+        "-landroid",
+        "-ljnigraphics",
+        "-llog",
+        "-lm",
+        "-z defs",
+        "-s",
+        "-ldl",
+#        "-Wl,--icf=all",  # Identical Code Folding
+    ],
+    tags = [
+        "manual",
+        "notap",
+    ],
+#    linkshared = 1,
+    linkstatic = 1,
     deps = [
-        "//tensorflow:tf_exported_symbols.lds",
-        "//tensorflow:tf_version_script.lds",
-        "//tensorflow/c:c_api",
-        "//tensorflow/c/eager:c_api",
-        "//tensorflow/cc:cc_ops",
-        "//tensorflow/cc:client_session",
-        "//tensorflow/cc:scope",
-        "//tensorflow/cc/profiler",
-        "//tensorflow/core:tensorflow",
+        "//tensorflow/core:android_tensorflow_lib",
     ],
 )
 
diff -ruN tensorflow-1.6.0-rc0/tensorflow/c/BUILD tensorflow-1.6.0-rc0-android/tensorflow/c/BUILD
--- tensorflow-1.6.0-rc0/tensorflow/c/BUILD	2018-02-05 05:28:47.000000000 +0900
+++ tensorflow-1.6.0-rc0-android/tensorflow/c/BUILD	2018-02-09 20:51:49.203002437 +0900
@@ -102,6 +102,19 @@
     visibility = ["//visibility:public"],
 )
 
+filegroup(
+    name = "c_api_files",
+    srcs = glob(
+        ["**/*"],
+        exclude = [
+            "**/METADATA",
+            "**/OWNERS",
+            "**/*test*.cc",
+        ],
+    ),
+    visibility = ["//visibility:public"],
+)
+
 tf_cuda_library(
     name = "tf_status_helper",
     srcs = ["tf_status_helper.cc"],
diff -ruN tensorflow-1.6.0-rc0/tensorflow/core/BUILD tensorflow-1.6.0-rc0-android/tensorflow/core/BUILD
--- tensorflow-1.6.0-rc0/tensorflow/core/BUILD	2018-02-05 05:28:47.000000000 +0900
+++ tensorflow-1.6.0-rc0-android/tensorflow/core/BUILD	2018-02-09 23:47:53.694044537 +0900
@@ -1119,7 +1119,10 @@
 # binary size (by packaging a reduced operator set) is a concern.
 cc_library(
     name = "android_tensorflow_lib",
-    srcs = if_android([":android_op_registrations_and_gradients"]),
+    srcs = if_android([
+    	":android_op_registrations_and_gradients",
+    	"//tensorflow/c:c_api_files",
+    ]),
     copts = tf_copts(),
     tags = [
         "manual",
@@ -1496,7 +1499,7 @@
         "//tensorflow:windows_msvc": [],
         "//conditions:default": [
             "-ldl",
-            "-lpthread",
+#            "-lpthread",
         ],
     }),
     deps = tf_additional_lib_deps() + [
diff -ruN tensorflow-1.6.0-rc0/tensorflow/core/common_runtime/gpu/gpu_debug_allocator.cc tensorflow-1.6.0-rc0-android/tensorflow/core/common_runtime/gpu/gpu_debug_allocator.cc
--- tensorflow-1.6.0-rc0/tensorflow/core/common_runtime/gpu/gpu_debug_allocator.cc	2018-02-05 05:28:47.000000000 +0900
+++ tensorflow-1.6.0-rc0-android/tensorflow/core/common_runtime/gpu/gpu_debug_allocator.cc	2018-02-09 21:27:48.466753560 +0900
@@ -169,7 +169,7 @@
 
   // Initialize the buffer to Nans
   size_t req_size = base_allocator_->RequestedSize(allocated_ptr);
-  std::vector<float> nans(req_size / sizeof(float), std::nanf(""));
+  std::vector<float> nans(req_size / sizeof(float), nanf(""));
   gpu::DeviceMemory<float> nan_ptr{
       gpu::DeviceMemoryBase{static_cast<float*>(allocated_ptr), req_size}};
 
@@ -182,7 +182,7 @@
 void GPUNanResetAllocator::DeallocateRaw(void* ptr) {
   // Reset the buffer to Nans
   size_t req_size = base_allocator_->RequestedSize(ptr);
-  std::vector<float> nans(req_size / sizeof(float), std::nanf(""));
+  std::vector<float> nans(req_size / sizeof(float), nanf(""));
   gpu::DeviceMemory<float> nan_ptr{
       gpu::DeviceMemoryBase{static_cast<float*>(ptr), req_size}};
   if (!stream_exec_->SynchronousMemcpy(&nan_ptr, &nans[0], req_size)) {
diff -ruN tensorflow-1.6.0-rc0/tensorflow/core/kernels/BUILD tensorflow-1.6.0-rc0-android/tensorflow/core/kernels/BUILD
--- tensorflow-1.6.0-rc0/tensorflow/core/kernels/BUILD	2018-02-05 05:28:47.000000000 +0900
+++ tensorflow-1.6.0-rc0-android/tensorflow/core/kernels/BUILD	2018-02-09 20:51:49.204002435 +0900
@@ -4772,6 +4772,7 @@
         "warn_about_ints.h",
         "where_op.h",
         "xent_op.h",
+        "cwise_op_floor.cc",
     ],
 )
 
diff -ruN tensorflow-1.6.0-rc0/tensorflow/tensorflow.bzl tensorflow-1.6.0-rc0-android/tensorflow/tensorflow.bzl
--- tensorflow-1.6.0-rc0/tensorflow/tensorflow.bzl	2018-02-05 05:28:47.000000000 +0900
+++ tensorflow-1.6.0-rc0-android/tensorflow/tensorflow.bzl	2018-02-09 20:51:49.205002433 +0900
@@ -187,7 +187,6 @@
   # to be used, pass android_optimization_level_override=None
   android_copts = [
       "-std=c++11",
-      "-DTF_LEAN_BINARY",
       "-Wno-narrowing",
       "-fomit-frame-pointer",
   ]
diff -ruN tensorflow-1.6.0-rc0/WORKSPACE tensorflow-1.6.0-rc0-android/WORKSPACE
--- tensorflow-1.6.0-rc0/WORKSPACE	2018-02-05 05:28:47.000000000 +0900
+++ tensorflow-1.6.0-rc0-android/WORKSPACE	2018-02-09 20:51:49.205002433 +0900
@@ -27,15 +27,15 @@
 #    path = "<PATH_TO_SDK>",
 #)
 #
-#android_ndk_repository(
-#    name="androidndk",
-#    path="<PATH_TO_NDK>",
-#    # This needs to be 14 or higher to compile TensorFlow.
-#    # Please specify API level to >= 21 to build for 64-bit
-#    # archtectures or the Android NDK will automatically select biggest
-#    # API level that it supports without notice.
-#    # Note that the NDK version is not the API level.
-#    api_level=14)
+android_ndk_repository(
+    name="androidndk",
+    path="<PATH_TO_NDK>",
+    # This needs to be 14 or higher to compile TensorFlow.
+    # Please specify API level to >= 21 to build for 64-bit
+    # archtectures or the Android NDK will automatically select biggest
+    # API level that it supports without notice.
+    # Note that the NDK version is not the API level.
+    api_level=21)
 
 # Please add all new TensorFlow dependencies in workspace.bzl.
 tf_workspace()
